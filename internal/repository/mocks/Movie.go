// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	dto "movierental/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// Movie is an autogenerated mock type for the Movie type
type Movie struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *Movie) Get(id int) (dto.Movie, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 dto.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (dto.Movie, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) dto.Movie); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto.Movie)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Movie) GetAll() ([]dto.Movie, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []dto.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dto.Movie, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.Movie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoviesByFilter provides a mock function with given fields: _a0, _a1, _a2
func (_m *Movie) GetMoviesByFilter(_a0 string, _a1 string, _a2 string) ([]dto.Movie, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetMoviesByFilter")
	}

	var r0 []dto.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]dto.Movie, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []dto.Movie); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMovie creates a new instance of Movie. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovie(t interface {
	mock.TestingT
	Cleanup(func())
}) *Movie {
	mock := &Movie{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
